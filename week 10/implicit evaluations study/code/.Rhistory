p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Define the source area to magnify
from <- c(xmin = 0.4, xmax = 0.6, ymin = 2, ymax = 3)
# Define the destination area for the magnified plot (adjust these values as needed)
to <- c(xmin = 0.7, xmax = 1, ymin = 0, ymax = 5)
# Add the magnified area to the plot
p + geom_magnify(from = from, to = to)
library(ggplot2)
library(ggmagnify)
# Create the ggplot object 'p'
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Define the source area to magnify
from <- c(xmin = 0.3, xmax = 0.6, ymin = 0.7, ymax = 1.2)
# Define the destination area for the magnified plot (adjust these values as needed)
to <- c(xmin = 0.7, xmax = 1, ymin = 0, ymax = 5)
# Add the magnified area to the plot
p + geom_magnify(from = from, to = to)
library(ggplot2)
library(ggmagnify)
# Create the ggplot object 'p'
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Define the source area to magnify
from <- c(xmin = 0.3, xmax = 0.6, ymin = 0.7, ymax = 1.2)
# Define the destination area for the magnified plot (adjust these values as needed)
to <- c(xmin = 1, xmax = 1.25, ymin = 0, ymax = 5)
# Add the magnified area to the plot
p + geom_magnify(from = from, to = to)
library(ggplot2)
library(ggmagnify)
# Create the ggplot object 'p'
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Define the source area to magnify
from <- c(xmin = 0.3, xmax = 0.6, ymin = 0.7, ymax = 1.3)
# Define the destination area for the magnified plot (adjust these values as needed)
to <- c(xmin = 0.7, xmax = 1, ymin = 0, ymax = 5)
# Add the magnified area to the plot
p + geom_magnify(from = from, to = to)
library(ggplot2)
library(ggmagnify)
# Create the ggplot object 'p'
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Define the source area to magnify
from <- c(xmin = 0.3, xmax = 0.6, ymin = 0.7, ymax = 1.3)
# Define the destination area for the magnified plot (adjust these values as needed)
to <- c(xmin = 0.7, xmax = 1, ymin = 3, ymax =4 )
# Add the magnified area to the plot
p + geom_magnify(from = from, to = to)
library(ggplot2)
library(ggmagnify)
# Create the ggplot object 'p'
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Define the source area to magnify
from <- c(xmin = 0.3, xmax = 0.6, ymin = 0.7, ymax = 1.3)
# Define the destination area for the magnified plot (adjust these values as needed)
to <- c(xmin = 0.75, xmax = 1, ymin = 3, ymax =4 )
# Add the magnified area to the plot
p + geom_magnify(from = from, to = to)
library(ggplot2)
library(ggmagnify)
# Create the ggplot object 'p'
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Define the source area to magnify
from <- c(xmin = 0.3, xmax = 0.6, ymin = 0.7, ymax = 1.3)
# Define the destination area for the magnified plot (adjust these values as needed)
to <- c(xmin = 0.75, xmax = 1, ymin = 4, ymax =5 )
# Add the magnified area to the plot
p + geom_magnify(from = from, to = to)
# Install the raincloudplots package if not already installed
if (!require('raincloudplots')) {
devtools::install_github("RainCloudPlots/raincloudplots")
}
install.packages(devtools)
# Install the raincloudplots package if not already installed
if (!require('raincloudplots')) {
devtools::install_github("RainCloudPlots/raincloudplots")
}
install.packages(devtools)
# Install the raincloudplots package if not already installed
if (!require('raincloudplots')) {
devtools::install_github("RainCloudPlots/raincloudplots")
}
install.packages(devtools)
# Install the raincloudplots package if not already installed
if (!require('raincloudplots')) {
devtools::install_github("RainCloudPlots/raincloudplots")
}
install.packages(devtools)
install.packages(raincloudplots)
# Install and load required packages
if (!require('ggplot2')) {
install.packages("ggplot2")
}
library(ggplot2)
if (!require('ggrepel')) {
install.packages("ggrepel")
}
library(ggrepel)
# Define the height for raincloud plot components
rain_height <- .1
# Create a raincloud plot using ggplot2 and ggrepel
p_raincloud <- ggplot(data_processed_after_exclusions, aes(x = gender, y = mean_evaluation, fill = gender)) +
# clouds (flat violins)
geom_violin(trim = FALSE, alpha = 0.4, scale = "width",
position = position_nudge(x = rain_height + .05)) +
# rain (points)
geom_point(aes(color = gender), size = 2, alpha = 0.5, position = position_jitter(width = rain_height)) +
# boxplots
geom_boxplot(width = rain_height, alpha = 0.4, outlier.shape = NA,
position = position_nudge(x = -rain_height * 2)) +
# summary statistics (mean and standard error)
stat_summary(fun.data = mean_se, geom = "errorbar", width = rain_height,
position = position_nudge(x = rain_height * 3), color = "black") +
stat_summary(fun = mean, geom = "point",
position = position_nudge(x = rain_height * 3), color = "black", size = 3) +
# adjust layout
scale_x_discrete(name = "", expand = expansion(add = c(rain_height * 3, 0))) +
scale_y_continuous(name = "Mean Self-Reported Evaluation") +
coord_flip() +
facet_wrap(~gender, scales = "free_y", ncol = 1) +
# custom colors and theme
theme_minimal() +
theme(legend.position = "none")  # Hide the legend if not needed
# Print the plot
print(p_raincloud)
# Install and load required packages
if (!require('ggplot2')) {
install.packages("ggplot2")
}
library(ggplot2)
if (!require('ggrepel')) {
install.packages("ggrepel")
}
library(ggrepel)
# Define the height for raincloud plot components
rain_height <- .1
# Create a raincloud plot using ggplot2 and ggrepel
p_raincloud <- ggplot(data_processed_after_exclusions, aes(x = gender, y = mean_evaluation, fill = gender)) +
# clouds (flat violins)
geom_violin(trim = FALSE, alpha = 0.4, scale = "width",
position = position_nudge(x = rain_height + .05)) +
# rain (points)
geom_point(aes(color = gender), size = 2, alpha = 0.5, position = position_jitter(width = rain_height)) +
# boxplots
geom_boxplot(width = rain_height, alpha = 0.4, outlier.shape = NA,
position = position_nudge(x = -rain_height * 2)) +
# summary statistics (mean and standard error)
stat_summary(fun.data = mean_se, geom = "errorbar", width = rain_height,
position = position_nudge(x = rain_height * 3), color = "black") +
stat_summary(fun = mean, geom = "point",
position = position_nudge(x = rain_height * 3), color = "black", size = 3) +
# adjust layout
scale_x_discrete(name = "", expand = expansion(add = c(rain_height * 3, 0))) +
scale_y_continuous(name = "Mean Self-Reported Evaluation") +
coord_flip() +
facet_wrap(~gender, scales = "free_y", ncol = 1) +
# custom colors and theme
theme_minimal() +
theme(legend.position = "none")  # Hide the legend if not needed
scale_color_manual(values = c("Neon Pink" = "#FF6EC7",
"Neon Blue" = "#4D4DFF",
"Neon Yellow" = "#FFFF33")) +
# Print the plot
print(p_raincloud)
# Install and load required packages
if (!require('ggplot2')) {
install.packages("ggplot2")
}
library(ggplot2)
if (!require('ggrepel')) {
install.packages("ggrepel")
}
library(ggrepel)
# Define the height for raincloud plot components
rain_height <- .1
# Create a raincloud plot using ggplot2 and ggrepel
p_raincloud <- ggplot(data_processed_after_exclusions, aes(x = gender, y = mean_evaluation, fill = gender)) +
# clouds (flat violins)
geom_violin(trim = FALSE, alpha = 0.4, scale = "width",
position = position_nudge(x = rain_height + .05)) +
# rain (points)
geom_point(aes(color = gender), size = 2, alpha = 0.5, position = position_jitter(width = rain_height)) +
# boxplots
geom_boxplot(width = rain_height, alpha = 0.4, outlier.shape = NA,
position = position_nudge(x = -rain_height * 2)) +
# summary statistics (mean and standard error)
stat_summary(fun.data = mean_se, geom = "errorbar", width = rain_height,
position = position_nudge(x = rain_height * 3), color = "black") +
stat_summary(fun = mean, geom = "point",
position = position_nudge(x = rain_height * 3), color = "black", size = 3) +
# adjust layout
scale_x_discrete(name = "", expand = expansion(add = c(rain_height * 3, 0))) +
scale_y_continuous(name = "Mean Self-Reported Evaluation") +
coord_flip() +
facet_wrap(~gender, scales = "free_y", ncol = 1) +
# custom colors and theme
theme_minimal() +
theme(legend.position = "none")  # Hide the legend if not needed
# Print the plot
print(p_raincloud)
library(ggplot2)
library(ggrepel)
# Define your neon colors
neon_colors <- c("Neon Pink" = "#FF6EC7",
"Neon Blue" = "#4D4DFF",
"Neon Yellow" = "#FFFF33")
# Assuming 'gender' has three levels: 'male', 'female', and 'nonbinary'
# Map these levels to the neon colors
gender_colors <- c("male" = neon_colors["Neon Blue"],
"female" = neon_colors["Neon Pink"],
"nonbinary" = neon_colors["Neon Yellow"])
# Create a raincloud plot
p_raincloud <- ggplot(data_processed_after_exclusions, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), adjust = 2) +
geom_point(position = position_jitter(width = 0.15), size = 2, alpha = 0.5) +
geom_boxplot(width = 0.1, guides = FALSE) +
scale_color_manual(values = gender_colors) +  # Use custom neon colors for points
scale_fill_manual(values = gender_colors) +   # Use custom neon colors for violins
theme_minimal() +
labs(title = "Raincloud Plot of Self-Reported Evaluations", x = "Gender", y = "Mean Self-Reported Evaluation")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
data_amp_score_congruence <- data_amp_raw |>
select(subject, evaluative_response = correct, trialcode, blockcode) |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(trialcode = case_when(trialcode == "prime_positive" ~ 1,
trialcode == "prime_negative" ~ 0,
TRUE ~ NA),
prime_congruence = ifelse(trialcode == evaluative_response, 1, 0))
# sanity check 1: if you consider all the combiantions of factor levels of trialcode, evaluative_response, and prime congruence, there should be only 4:
data_amp_score_congruence |>
count(trialcode, evaluative_response, prime_congruence)
data_amp_score_congruence |>
count(trialcode, evaluative_response, prime_congruence) |>
nrow() == 4
# calculate AMP score
data_amp_score <- data_amp_score_congruence |>
group_by(subject) |>
summarize(AMP_score = mean(prime_congruence, na.rm = TRUE)) |>
select(subject, AMP_score)
# sanity check 2: check if AMP_score is numeric
is.numeric(data_amp_score$AMP_score)
# sanity check 3: check if AMP_score is bounded [0,1]
data_amp_score |>
mutate(bounded_correctly = between(AMP_score, left = 0, right = 1)) |>
filter(bounded_correctly != TRUE) |>
nrow() == 0
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_score, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject") |>
full_join(data_amp_completeness, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual dupicate cases and determine which of the mulitiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_amp_completeness == "exclude" ~ "exclude",
TRUE ~ "include"))
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
install.packages("ggExtra")
library("ggExtra")
install.packages("ggmarginal")
# Install and load the viridis package
install.packages("viridis")
library(viridis)
# Your ggplot code with viridis color scale
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
scale_color_viridis(discrete = TRUE)  # This will now work since viridis is loaded
# Add marginal histograms with ggExtra::ggMarginal without specifying 'fill'
p <- ggExtra::ggMarginal(p, type = "histogram", margins = "both")
# Print the plot
print(p)
library(ggplot2)
library(ggExtra)
library(patchwork)
# Create a list to hold plots
plots <- list()
# Loop through each gender to create individual plots
for (gender in unique(data_processed_after_exclusions$gender)) {
data_subset <- data_processed_after_exclusions[data_processed_after_exclusions$gender == gender,]
p <- ggplot(data_subset, aes(x = AMP_score, y = mean_evaluation)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
ggtitle(gender)  # Add a title to distinguish each plot
# Add marginal histograms
p <- ggExtra::ggMarginal(p, type = "histogram", margins = "both")
# Store the plot in the list
plots[[gender]] <- p
}
