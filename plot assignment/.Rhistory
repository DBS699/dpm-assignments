overall_mean_neuroticism = mean(neuroticism_mean, na.rm = TRUE),
overall_mean_openness = mean(openness_mean, na.rm = TRUE)
)
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),  # Converting x6 to numeric
category = as.character(x3),
trial = as.character(trial),
response = as.character(x5)   # Converting x5 to character
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,  # Keeping participant
block,# Keeping block
category, # Renamed from x3
trial,# keeping trial# Renamed from x6
response,# Renamed from x5
reaction_time,
# Include any other two columns you want to keep
)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
data_demographics <- read.csv("../data/raw/data_raw_demographics.csv") %>%
janitor::clean_names()
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv")
#Getting rid of first row
data_iat_raw <- data_iat_raw[-1, ] %>%
janitor::clean_names()
data_personality_raw <- read_csv("../data/raw/data_raw_bfi.csv")  %>%
janitor::clean_names()
data_age_sex <- data_demographics  %>%
distinct(unique_id, variable, .keep_all = TRUE) %>%
pivot_wider(id_cols = unique_id,
names_from = variable,
values_from = response) %>%
mutate(unique_id = as.character(unique_id),
age = as.numeric(age),
sex = as.character(sex))
#using recode to manually reverse all the neccessary items
data_personality_reversed <- data_personality_raw %>%
mutate(bfi_e2 = recode(bfi_e2, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_e5 = recode(bfi_e5, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_e7 = recode(bfi_e7, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c2 = recode(bfi_c2, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c4 = recode(bfi_c4, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c5 = recode(bfi_c5, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c9 = recode(bfi_c9, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_n2 = recode(bfi_n2, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_n5 = recode(bfi_n5, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_n7 = recode(bfi_n7, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a1 = recode(bfi_a1, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a3 = recode(bfi_a3, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a6 = recode(bfi_a6, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a8 = recode(bfi_a8, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_o7 = recode(bfi_o7, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_o9 = recode(bfi_o9, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
unique_id = as.character(unique_id))
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_e"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for Conscientiousness items
Conscientiousness_items <- data_personality_reversed %>%
select(starts_with("bfi_c"))
# Calculate the correlation matrix
correlation_Conscientiousness <- cor(Conscientiousness_items, use = "complete.obs")
# View the correlation matrix
print(correlation_Conscientiousness)
# Check for any negative correlations
any_negative_correlations <- any(correlation_Conscientiousness < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for Neuroticism items
Neuroticism_items <- data_personality_reversed %>%
select(starts_with("bfi_n"))
# Calculate the correlation matrix
correlation_Neuroticism <- cor(Neuroticism_items, use = "complete.obs")
# View the correlation matrix
print(correlation_Neuroticism)
# Check for any negative correlations
any_negative_correlations <- any(correlation_Neuroticism < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for Agreeableness items
Agreeableness_items <- data_personality_reversed %>%
select(starts_with("bfi_a"))
# Calculate the correlation matrix
correlation_Agreeableness <- cor(Agreeableness_items, use = "complete.obs")
# View the correlation matrix
print(correlation_Agreeableness)
# Check for any negative correlations
any_negative_correlations <- any(correlation_Agreeableness < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for oe items
oe_items <- data_personality_reversed %>%
select(starts_with("bfi_o"))
# Calculate the correlation matrix
correlation_oe <- cor(oe_items, use = "complete.obs")
# View the correlation matrix
print(correlation_oe)
# Check for any negative correlations
any_negative_correlations <- any(correlation_oe < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Check if any item is outside the range 1 to 6 and is not NA
data_personality_reversed_likert <- data_personality_reversed %>%
rowwise() %>%
mutate(is_likert= ifelse(any(c_across(starts_with("bfi_")) < 1 |
c_across(starts_with("bfi_")) > 6, na.rm = TRUE), "exclude", "include")) %>%
ungroup()
##na.rm = TRUE ensures that missing values (NA) are ignored in this calculation.
# View the first few rows of the modified dataset
head(data_personality_reversed_likert)
library(tidyverse)
# Function to check for missing values in a scale and create an exclusion flag
check_and_flag_missing_data <- function(data, scale_prefix) {
scale_items <- select(data, starts_with(scale_prefix))
flag <- ifelse(rowSums(is.na(scale_items)) > 0, "exclude", "include")
return(flag)
}
# Apply the function to each BFI scale and add exclusion flags to the dataset
data_bfi_completed <- data_personality_reversed_likert %>%
mutate(
complete_criteria_a = check_and_flag_missing_data(., "BFI_a"),
complete_criteria_c = check_and_flag_missing_data(., "BFI_c"),
complete_criteria_e = check_and_flag_missing_data(., "BFI_e"),
complete_criteria_n = check_and_flag_missing_data(., "BFI_n"),
complete_criteria_o = check_and_flag_missing_data(., "BFI_o")  # Explicitly checking for BFI_o
)
# View the first few rows of the modified dataset
head(data_bfi_completed)
library(dplyr)
# Calculate mean scores for participants with complete data
data_bfi_mean_scores <- data_bfi_completed %>%
rowwise() %>%
mutate(
agreeableness_mean = ifelse(complete_criteria_a == "include", mean(c_across(starts_with("BFI_a")), na.rm = TRUE), NA),
conscientiousness_mean = ifelse(complete_criteria_c == "include", mean(c_across(starts_with("BFI_c")), na.rm = TRUE), NA),
extraversion_mean = ifelse(complete_criteria_e == "include", mean(c_across(starts_with("BFI_e")), na.rm = TRUE), NA),
neuroticism_mean = ifelse(complete_criteria_n == "include", mean(c_across(starts_with("BFI_n")), na.rm = TRUE), NA),
openness_mean = ifelse(complete_criteria_o == "include", mean(c_across(starts_with("BFI_o")), na.rm = TRUE), NA)
) %>%
ungroup()
# View the modified dataset
head(data_bfi_mean_scores)
#calculate overall mean scores
library(dplyr)
# Calculate the overall mean for each BFI subscale
data_bfi_overall_mean_scores <- data_bfi_mean_scores %>%
summarize(
overall_mean_agreeableness = mean(agreeableness_mean, na.rm = TRUE),
overall_mean_conscientiousness = mean(conscientiousness_mean, na.rm = TRUE),
overall_mean_extraversion = mean(extraversion_mean, na.rm = TRUE),
overall_mean_neuroticism = mean(neuroticism_mean, na.rm = TRUE),
overall_mean_openness = mean(openness_mean, na.rm = TRUE)
)
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),  # Converting x6 to numeric
category = as.character(x3),
trial = as.character(trial),
response = as.character(x5)   # Converting x5 to character
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,  # Keeping participant
block,# Keeping block
category, # Renamed from x3
trial,# keeping trial# Renamed from x6
response,# Renamed from x5
reaction_time,
# Include any other two columns you want to keep
)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
```{r}
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),  # Converting x6 to numeric
category = as.character(x3),
trial = as.character(trial),
response = as.character(x5)   # Converting x5 to character
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,  # Keeping participant
block,# Keeping block
category, # Renamed from x3
trial,# keeping trial# Renamed from x6
response,# Renamed from x5
reaction_time,
# Include any other two columns you want to keep
)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
library(tidyverse)
library(janitor)
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),  # Converting x6 to numeric
category = as.character(x3),
trial = as.character(trial),
response = as.character(x5)   # Converting x5 to character
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,  # Keeping participant
block,# Keeping block
category, # Renamed from x3
trial,# keeping trial# Renamed from x6
response,# Renamed from x5
reaction_time,
# Include any other two columns you want to keep
)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),  # Converting x6 to numeric
category = as.character(x3),
trial = as.character(trial),
response = as.character(x5)   # Converting x5 to character
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,  # Keeping participant
block,# Keeping block
category, # Renamed from x3
trial,# keeping trial# Renamed from x6
response,# Renamed from x5
reaction_time,
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
# View the resulting scores
iat_d_scores
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),  # Converting x6 to numeric
category = as.character(x3),
trial = as.character(trial),
response = as.character(x5)   # Converting x5 to character
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,  # Keeping participant
block,# Keeping block
category, # Renamed from x3
trial,# keeping trial# Renamed from x6
response,# Renamed from x5
reaction_time,
# Include any other two columns you want to keep
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
# View the resulting scores
iat_d_scores
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),  # Converting x6 to numeric
category = as.character(x3),
trial = as.character(trial),
response = as.character(x5)   # Converting x5 to character
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,  # Keeping participant
block,# Keeping block
category, # Renamed from x3
trial,# keeping trial# Renamed from x6
response,# Renamed from x5
reaction_time,)
# Include any other two columns you want to keep
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
# Load your dataset and convert necessary columns to numeric
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),
category = as.character(x3),
reactiontime = as.numeric(x6),
response = as.character(x5),
trial = as.character(trial)
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,
block,
category,
trial,
response,
reaction_time
)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
# Load your dataset and convert necessary columns to numeric
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),
category = as.character(x3),
reactiontime = as.numeric(x6),
response = as.character(x5),
trial = as.character(trial)
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,
block,
category,
trial,
response,
reaction_time
)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
# Load your dataset and convert necessary columns to numeric
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),
category = as.character(x3),
reactiontime = as.numeric(x6),
response = as.character(x5),
trial = as.character(trial)
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,
block,
category,
trial,
response,
reaction_time
)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
# Load your dataset and convert necessary columns to numeric
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),
category = as.character(x3),
reactiontime = as.numeric(x6),
response = as.character(x5),
trial = as.character(trial)
) %>%
filter(block %in% c(3, 4, 6, 7), response == "correct") %>%
select(
participant,
block,
category,
trial,
response,
reaction_time
)
# Your existing code for data transformation
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
mutate(D = (mean2 - mean1) / SD)
